openapi: 3.0.1
info:
  title: Bff Service API
  version: 1.0.0
  description: API for BFF service.
servers:
  - url: https://d156fpdq5aqlf7.cloudfront.net
    description: Production server
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication using username and password encoded in base64
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: The product identifier
        title:
          type: string
          description: The product title
        description:
          type: string
          description: The product description
        price:
          type: number
          description: The product price
        count:
          type: integer
          description: Available quantity
      required:
        - id
        - title
        - price
        - count
    ProductCreate:
      type: object
      properties:
        title:
          type: string
          description: The product title
        description:
          type: string
          description: The product description
        price:
          type: number
          description: The product price
        count:
          type: integer
          description: Available quantity
      required:
        - title
        - price
        - count
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
      required:
        - message
    CartProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
      required:
        - id
        - title
        - price
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        cartId:
          type: string
          format: uuid
        address:
          $ref: '#/components/schemas/OrderAddress'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        statusHistory:
          type: array
          items:
            $ref: '#/components/schemas/OrderStatus'
      required:
        - id
        - userId
        - cartId
        - address
        - items
        - statusHistory
    OrderAddress:
      type: object
      properties:
        address:
          type: string
        comment:
          type: string
        lastName:
          type: string
        firstName:
          type: string
      required:
        - address
        - lastName
        - firstName
    OrderItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
        count:
          type: integer
      required:
        - productId
        - count
    OrderStatus:
      type: object
      properties:
        comment:
          type: string
        status:
          type: string
          enum: [OPEN, APPROVED, CONFIRMED, SENT, COMPLETED, CANCELLED]
        timestamp:
          type: string
          format: date-time
      required:
        - status
        - timestamp
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
tags:
  - name: cart
    description: Cart and Order management
  - name: product
    description: Products management
paths:
  /product/products:
    get:
      tags: [product]
      summary: Get all products
      description: Returns a list of all available products
      operationId: getProductsList
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags: [product]
      summary: Create a new product
      description: Creates a new product with stock information
      operationId: createProduct
      requestBody:
        description: Product object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /product/products/{productId}:
    get:
      tags: [product]
      summary: Get product by ID
      description: Returns a single product by ID
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cart/ping:
    get:
      tags: [cart]
      summary: Health check endpoint
      description: Returns a 200 status code if the service is up and running
      operationId: ping
      responses:
        '200':
          description: Service is up and running
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: 'OK'
  /cart/api/auth/register:
    post:
      tags: [cart]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                password:
                  type: string
              required:
                - name
                - password
      responses:
        '201':
          description: Registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    format: uuid
  /cart/api/auth/login:
    post:
      tags: [cart]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token_type:
                    type: string
                    example: Basic
                  access_token:
                    type: string
                    example: ZWxpYW50YTpURVNUX1BBU1NXT1JE
  /cart/api/profile:
    get:
      tags: [cart]
      summary: User profile data
      security:
        - basicAuth: []
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
  /cart/api/profile/cart:
    get:
      tags: [cart]
      summary: Get cart
      security:
        - basicAuth: []
      responses:
        '200':
          description: Current cart
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    product:
                      $ref: '#/components/schemas/CartProduct'
                    count:
                      type: integer
        '401':
          description: Unauthorized - Invalid credentials
    put:
      tags: [cart]
      summary: Update cart
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  $ref: '#/components/schemas/CartProduct'
                count:
                  type: integer
              required: [product, count]
      responses:
        '200':
          description: Cart update
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    product:
                      $ref: '#/components/schemas/CartProduct'
                    count:
                      type: integer
        '401':
          description: Unauthorized - Invalid credentials
    delete:
      tags: [cart]
      summary: Delete cart
      security:
        - basicAuth: []
      responses:
        '200':
          description: Cart cleared
        '401':
          description: Unauthorized - Invalid credentials
  /cart/api/profile/cart/order:
    get:
      tags: [cart]
      summary: Get all orders
      security:
        - basicAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - Invalid credentials
    put:
      tags: [cart]
      summary: Place an order
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/OrderItem'
                address:
                  $ref: '#/components/schemas/OrderAddress'
              required: [items, address]
      responses:
        '200':
          description: Order placed
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - Invalid credentials
  /cart/api/profile/cart/order/{id}:
    get:
      tags: [cart]
      summary: Get order by ID
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - Invalid credentials
        '403':
          description: Forbidden - Access denied
        '404':
          description: Order not found
    delete:
      tags: [cart]
      summary: Delete order by ID
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Order successfully deleted
        '401':
          description: Unauthorized - Invalid credentials
        '403':
          description: Forbidden - Access denied
        '404':
          description: Order not found
  /cart/api/profile/cart/order/{id}/status:
    put:
      tags: [cart]
      summary: Update order status
      security:
        - basicAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [OPEN, APPROVED, CONFIRMED, SENT, COMPLETED, CANCELLED]
                comment:
                  type: string
              required:
                - status
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - Invalid credentials
        '403':
          description: Forbidden - Access denied
        '404':
          description: Order not found
